// THIS IS AN AUTOGENERATED FILE. DO NOT MODIFY.

package nintaco

func (r *remoteAPI) SetPaused(paused bool) {
	r.stream.writeByte(23)
	r.stream.writeBoolean(paused)
	r.stream.flush()
}

func (r *remoteAPI) IsPaused() bool {
	r.stream.writeByte(24)
	r.stream.flush()
	v, _ := r.stream.readBoolean()
	return v
}

func (r *remoteAPI) GetFrameCount() int {
	r.stream.writeByte(25)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) GetA() int {
	r.stream.writeByte(26)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) SetA(A int) {
	r.stream.writeByte(27)
	r.stream.writeInt(A)
	r.stream.flush()
}

func (r *remoteAPI) GetS() int {
	r.stream.writeByte(28)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) SetS(S int) {
	r.stream.writeByte(29)
	r.stream.writeInt(S)
	r.stream.flush()
}

func (r *remoteAPI) GetPC() int {
	r.stream.writeByte(30)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) SetPC(PC int) {
	r.stream.writeByte(31)
	r.stream.writeInt(PC)
	r.stream.flush()
}

func (r *remoteAPI) GetX() int {
	r.stream.writeByte(32)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) SetX(X int) {
	r.stream.writeByte(33)
	r.stream.writeInt(X)
	r.stream.flush()
}

func (r *remoteAPI) GetY() int {
	r.stream.writeByte(34)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) SetY(Y int) {
	r.stream.writeByte(35)
	r.stream.writeInt(Y)
	r.stream.flush()
}

func (r *remoteAPI) GetP() int {
	r.stream.writeByte(36)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) SetP(P int) {
	r.stream.writeByte(37)
	r.stream.writeInt(P)
	r.stream.flush()
}

func (r *remoteAPI) IsN() bool {
	r.stream.writeByte(38)
	r.stream.flush()
	v, _ := r.stream.readBoolean()
	return v
}

func (r *remoteAPI) SetN(N bool) {
	r.stream.writeByte(39)
	r.stream.writeBoolean(N)
	r.stream.flush()
}

func (r *remoteAPI) IsV() bool {
	r.stream.writeByte(40)
	r.stream.flush()
	v, _ := r.stream.readBoolean()
	return v
}

func (r *remoteAPI) SetV(V bool) {
	r.stream.writeByte(41)
	r.stream.writeBoolean(V)
	r.stream.flush()
}

func (r *remoteAPI) IsD() bool {
	r.stream.writeByte(42)
	r.stream.flush()
	v, _ := r.stream.readBoolean()
	return v
}

func (r *remoteAPI) SetD(D bool) {
	r.stream.writeByte(43)
	r.stream.writeBoolean(D)
	r.stream.flush()
}

func (r *remoteAPI) IsI() bool {
	r.stream.writeByte(44)
	r.stream.flush()
	v, _ := r.stream.readBoolean()
	return v
}

func (r *remoteAPI) SetI(I bool) {
	r.stream.writeByte(45)
	r.stream.writeBoolean(I)
	r.stream.flush()
}

func (r *remoteAPI) IsZ() bool {
	r.stream.writeByte(46)
	r.stream.flush()
	v, _ := r.stream.readBoolean()
	return v
}

func (r *remoteAPI) SetZ(Z bool) {
	r.stream.writeByte(47)
	r.stream.writeBoolean(Z)
	r.stream.flush()
}

func (r *remoteAPI) IsC() bool {
	r.stream.writeByte(48)
	r.stream.flush()
	v, _ := r.stream.readBoolean()
	return v
}

func (r *remoteAPI) SetC(C bool) {
	r.stream.writeByte(49)
	r.stream.writeBoolean(C)
	r.stream.flush()
}

func (r *remoteAPI) GetPPUv() int {
	r.stream.writeByte(50)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) SetPPUv(v int) {
	r.stream.writeByte(51)
	r.stream.writeInt(v)
	r.stream.flush()
}

func (r *remoteAPI) GetPPUt() int {
	r.stream.writeByte(52)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) SetPPUt(t int) {
	r.stream.writeByte(53)
	r.stream.writeInt(t)
	r.stream.flush()
}

func (r *remoteAPI) GetPPUx() int {
	r.stream.writeByte(54)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) SetPPUx(x int) {
	r.stream.writeByte(55)
	r.stream.writeInt(x)
	r.stream.flush()
}

func (r *remoteAPI) IsPPUw() bool {
	r.stream.writeByte(56)
	r.stream.flush()
	v, _ := r.stream.readBoolean()
	return v
}

func (r *remoteAPI) SetPPUw(w bool) {
	r.stream.writeByte(57)
	r.stream.writeBoolean(w)
	r.stream.flush()
}

func (r *remoteAPI) GetCameraX() int {
	r.stream.writeByte(58)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) SetCameraX(scrollX int) {
	r.stream.writeByte(59)
	r.stream.writeInt(scrollX)
	r.stream.flush()
}

func (r *remoteAPI) GetCameraY() int {
	r.stream.writeByte(60)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) SetCameraY(scrollY int) {
	r.stream.writeByte(61)
	r.stream.writeInt(scrollY)
	r.stream.flush()
}

func (r *remoteAPI) GetScanline() int {
	r.stream.writeByte(62)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) GetDot() int {
	r.stream.writeByte(63)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) IsSpriteZeroHit() bool {
	r.stream.writeByte(64)
	r.stream.flush()
	v, _ := r.stream.readBoolean()
	return v
}

func (r *remoteAPI) SetSpriteZeroHit(sprite0Hit bool) {
	r.stream.writeByte(65)
	r.stream.writeBoolean(sprite0Hit)
	r.stream.flush()
}

func (r *remoteAPI) GetScanlineCount() int {
	r.stream.writeByte(66)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) RequestInterrupt() {
	r.stream.writeByte(67)
	r.stream.flush()
}

func (r *remoteAPI) AcknowledgeInterrupt() {
	r.stream.writeByte(68)
	r.stream.flush()
}

func (r *remoteAPI) PeekCPU(address int) int {
	r.stream.writeByte(69)
	r.stream.writeInt(address)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) ReadCPU(address int) int {
	r.stream.writeByte(70)
	r.stream.writeInt(address)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) WriteCPU(address, value int) {
	r.stream.writeByte(71)
	r.stream.writeInt(address)
	r.stream.writeInt(value)
	r.stream.flush()
}

func (r *remoteAPI) PeekCPU16(address int) int {
	r.stream.writeByte(72)
	r.stream.writeInt(address)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) ReadCPU16(address int) int {
	r.stream.writeByte(73)
	r.stream.writeInt(address)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) WriteCPU16(address, value int) {
	r.stream.writeByte(74)
	r.stream.writeInt(address)
	r.stream.writeInt(value)
	r.stream.flush()
}

func (r *remoteAPI) PeekCPU32(address int) int {
	r.stream.writeByte(75)
	r.stream.writeInt(address)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) ReadCPU32(address int) int {
	r.stream.writeByte(76)
	r.stream.writeInt(address)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) WriteCPU32(address, value int) {
	r.stream.writeByte(77)
	r.stream.writeInt(address)
	r.stream.writeInt(value)
	r.stream.flush()
}

func (r *remoteAPI) ReadPPU(address int) int {
	r.stream.writeByte(78)
	r.stream.writeInt(address)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) WritePPU(address, value int) {
	r.stream.writeByte(79)
	r.stream.writeInt(address)
	r.stream.writeInt(value)
	r.stream.flush()
}

func (r *remoteAPI) ReadPaletteRAM(address int) int {
	r.stream.writeByte(80)
	r.stream.writeInt(address)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) WritePaletteRAM(address, value int) {
	r.stream.writeByte(81)
	r.stream.writeInt(address)
	r.stream.writeInt(value)
	r.stream.flush()
}

func (r *remoteAPI) ReadOAM(address int) int {
	r.stream.writeByte(82)
	r.stream.writeInt(address)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) WriteOAM(address, value int) {
	r.stream.writeByte(83)
	r.stream.writeInt(address)
	r.stream.writeInt(value)
	r.stream.flush()
}

func (r *remoteAPI) ReadGamepad(gamepad, button int) bool {
	r.stream.writeByte(84)
	r.stream.writeInt(gamepad)
	r.stream.writeInt(button)
	r.stream.flush()
	v, _ := r.stream.readBoolean()
	return v
}

func (r *remoteAPI) WriteGamepad(gamepad, button int, value bool) {
	r.stream.writeByte(85)
	r.stream.writeInt(gamepad)
	r.stream.writeInt(button)
	r.stream.writeBoolean(value)
	r.stream.flush()
}

func (r *remoteAPI) IsZapperTrigger() bool {
	r.stream.writeByte(86)
	r.stream.flush()
	v, _ := r.stream.readBoolean()
	return v
}

func (r *remoteAPI) SetZapperTrigger(zapperTrigger bool) {
	r.stream.writeByte(87)
	r.stream.writeBoolean(zapperTrigger)
	r.stream.flush()
}

func (r *remoteAPI) GetZapperX() int {
	r.stream.writeByte(88)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) SetZapperX(x int) {
	r.stream.writeByte(89)
	r.stream.writeInt(x)
	r.stream.flush()
}

func (r *remoteAPI) GetZapperY() int {
	r.stream.writeByte(90)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) SetZapperY(y int) {
	r.stream.writeByte(91)
	r.stream.writeInt(y)
	r.stream.flush()
}

func (r *remoteAPI) SetColor(color int) {
	r.stream.writeByte(92)
	r.stream.writeInt(color)
	r.stream.flush()
}

func (r *remoteAPI) GetColor() int {
	r.stream.writeByte(93)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) SetClip(x, y, width, height int) {
	r.stream.writeByte(94)
	r.stream.writeInt(x)
	r.stream.writeInt(y)
	r.stream.writeInt(width)
	r.stream.writeInt(height)
	r.stream.flush()
}

func (r *remoteAPI) ClipRect(x, y, width, height int) {
	r.stream.writeByte(95)
	r.stream.writeInt(x)
	r.stream.writeInt(y)
	r.stream.writeInt(width)
	r.stream.writeInt(height)
	r.stream.flush()
}

func (r *remoteAPI) ResetClip() {
	r.stream.writeByte(96)
	r.stream.flush()
}

func (r *remoteAPI) CopyArea(x, y, width, height, dx, dy int) {
	r.stream.writeByte(97)
	r.stream.writeInt(x)
	r.stream.writeInt(y)
	r.stream.writeInt(width)
	r.stream.writeInt(height)
	r.stream.writeInt(dx)
	r.stream.writeInt(dy)
	r.stream.flush()
}

func (r *remoteAPI) DrawLine(x1, y1, x2, y2 int) {
	r.stream.writeByte(98)
	r.stream.writeInt(x1)
	r.stream.writeInt(y1)
	r.stream.writeInt(x2)
	r.stream.writeInt(y2)
	r.stream.flush()
}

func (r *remoteAPI) DrawOval(x, y, width, height int) {
	r.stream.writeByte(99)
	r.stream.writeInt(x)
	r.stream.writeInt(y)
	r.stream.writeInt(width)
	r.stream.writeInt(height)
	r.stream.flush()
}

func (r *remoteAPI) DrawPolygon(xPoints, yPoints []int, nPoints int) {
	r.stream.writeByte(100)
	r.stream.writeIntArray(xPoints)
	r.stream.writeIntArray(yPoints)
	r.stream.writeInt(nPoints)
	r.stream.flush()
}

func (r *remoteAPI) DrawPolyline(xPoints, yPoints []int, nPoints int) {
	r.stream.writeByte(101)
	r.stream.writeIntArray(xPoints)
	r.stream.writeIntArray(yPoints)
	r.stream.writeInt(nPoints)
	r.stream.flush()
}

func (r *remoteAPI) DrawRect(x, y, width, height int) {
	r.stream.writeByte(102)
	r.stream.writeInt(x)
	r.stream.writeInt(y)
	r.stream.writeInt(width)
	r.stream.writeInt(height)
	r.stream.flush()
}

func (r *remoteAPI) DrawRoundRect(x, y, width, height, arcWidth, arcHeight int) {
	r.stream.writeByte(103)
	r.stream.writeInt(x)
	r.stream.writeInt(y)
	r.stream.writeInt(width)
	r.stream.writeInt(height)
	r.stream.writeInt(arcWidth)
	r.stream.writeInt(arcHeight)
	r.stream.flush()
}

func (r *remoteAPI) Draw3DRect(x, y, width, height int, raised bool) {
	r.stream.writeByte(104)
	r.stream.writeInt(x)
	r.stream.writeInt(y)
	r.stream.writeInt(width)
	r.stream.writeInt(height)
	r.stream.writeBoolean(raised)
	r.stream.flush()
}

func (r *remoteAPI) DrawArc(x, y, width, height, startAngle, arcAngle int) {
	r.stream.writeByte(105)
	r.stream.writeInt(x)
	r.stream.writeInt(y)
	r.stream.writeInt(width)
	r.stream.writeInt(height)
	r.stream.writeInt(startAngle)
	r.stream.writeInt(arcAngle)
	r.stream.flush()
}

func (r *remoteAPI) Fill3DRect(x, y, width, height int, raised bool) {
	r.stream.writeByte(106)
	r.stream.writeInt(x)
	r.stream.writeInt(y)
	r.stream.writeInt(width)
	r.stream.writeInt(height)
	r.stream.writeBoolean(raised)
	r.stream.flush()
}

func (r *remoteAPI) FillArc(x, y, width, height, startAngle, arcAngle int) {
	r.stream.writeByte(107)
	r.stream.writeInt(x)
	r.stream.writeInt(y)
	r.stream.writeInt(width)
	r.stream.writeInt(height)
	r.stream.writeInt(startAngle)
	r.stream.writeInt(arcAngle)
	r.stream.flush()
}

func (r *remoteAPI) FillOval(x, y, width, height int) {
	r.stream.writeByte(108)
	r.stream.writeInt(x)
	r.stream.writeInt(y)
	r.stream.writeInt(width)
	r.stream.writeInt(height)
	r.stream.flush()
}

func (r *remoteAPI) FillPolygon(xPoints, yPoints []int, nPoints int) {
	r.stream.writeByte(109)
	r.stream.writeIntArray(xPoints)
	r.stream.writeIntArray(yPoints)
	r.stream.writeInt(nPoints)
	r.stream.flush()
}

func (r *remoteAPI) FillRect(x, y, width, height int) {
	r.stream.writeByte(110)
	r.stream.writeInt(x)
	r.stream.writeInt(y)
	r.stream.writeInt(width)
	r.stream.writeInt(height)
	r.stream.flush()
}

func (r *remoteAPI) FillRoundRect(x, y, width, height, arcWidth, arcHeight int) {
	r.stream.writeByte(111)
	r.stream.writeInt(x)
	r.stream.writeInt(y)
	r.stream.writeInt(width)
	r.stream.writeInt(height)
	r.stream.writeInt(arcWidth)
	r.stream.writeInt(arcHeight)
	r.stream.flush()
}

func (r *remoteAPI) DrawChar(c rune, x, y int) {
	r.stream.writeByte(112)
	r.stream.writeChar(c)
	r.stream.writeInt(x)
	r.stream.writeInt(y)
	r.stream.flush()
}

func (r *remoteAPI) DrawChars(data []rune, offset, length, x, y int, monospaced bool) {
	r.stream.writeByte(113)
	r.stream.writeCharArray(data)
	r.stream.writeInt(offset)
	r.stream.writeInt(length)
	r.stream.writeInt(x)
	r.stream.writeInt(y)
	r.stream.writeBoolean(monospaced)
	r.stream.flush()
}

func (r *remoteAPI) DrawString(str string, x, y int, monospaced bool) {
	r.stream.writeByte(114)
	r.stream.writeString(str)
	r.stream.writeInt(x)
	r.stream.writeInt(y)
	r.stream.writeBoolean(monospaced)
	r.stream.flush()
}

func (r *remoteAPI) CreateSprite(id, width, height int, pixels []int) {
	r.stream.writeByte(115)
	r.stream.writeInt(id)
	r.stream.writeInt(width)
	r.stream.writeInt(height)
	r.stream.writeIntArray(pixels)
	r.stream.flush()
}

func (r *remoteAPI) DrawSprite(id, x, y int) {
	r.stream.writeByte(116)
	r.stream.writeInt(id)
	r.stream.writeInt(x)
	r.stream.writeInt(y)
	r.stream.flush()
}

func (r *remoteAPI) SetPixel(x, y, color int) {
	r.stream.writeByte(117)
	r.stream.writeInt(x)
	r.stream.writeInt(y)
	r.stream.writeInt(color)
	r.stream.flush()
}

func (r *remoteAPI) GetPixel(x, y int) int {
	r.stream.writeByte(118)
	r.stream.writeInt(x)
	r.stream.writeInt(y)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) PowerCycle() {
	r.stream.writeByte(120)
	r.stream.flush()
}

func (r *remoteAPI) Reset() {
	r.stream.writeByte(121)
	r.stream.flush()
}

func (r *remoteAPI) DeleteSprite(id int) {
	r.stream.writeByte(122)
	r.stream.writeInt(id)
	r.stream.flush()
}

func (r *remoteAPI) SetSpeed(percent int) {
	r.stream.writeByte(123)
	r.stream.writeInt(percent)
	r.stream.flush()
}

func (r *remoteAPI) StepToNextFrame() {
	r.stream.writeByte(124)
	r.stream.flush()
}

func (r *remoteAPI) ShowMessage(message string) {
	r.stream.writeByte(125)
	r.stream.writeString(message)
	r.stream.flush()
}

func (r *remoteAPI) GetWorkingDirectory() string {
	r.stream.writeByte(126)
	r.stream.flush()
	v, _ := r.stream.readString()
	return v
}

func (r *remoteAPI) GetContentDirectory() string {
	r.stream.writeByte(127)
	r.stream.flush()
	v, _ := r.stream.readString()
	return v
}

func (r *remoteAPI) Open(fileName string) {
	r.stream.writeByte(128)
	r.stream.writeString(fileName)
	r.stream.flush()
}

func (r *remoteAPI) OpenArchiveEntry(archiveFileName, entryFileName string) {
	r.stream.writeByte(129)
	r.stream.writeString(archiveFileName)
	r.stream.writeString(entryFileName)
	r.stream.flush()
}

func (r *remoteAPI) GetArchiveEntries(archiveFileName string) []string {
	r.stream.writeByte(130)
	r.stream.writeString(archiveFileName)
	r.stream.flush()
	v, _ := r.stream.readDynamicStringArray()
	return v
}

func (r *remoteAPI) GetDefaultArchiveEntry(archiveFileName string) string {
	r.stream.writeByte(131)
	r.stream.writeString(archiveFileName)
	r.stream.flush()
	v, _ := r.stream.readString()
	return v
}

func (r *remoteAPI) OpenDefaultArchiveEntry(archiveFileName string) {
	r.stream.writeByte(132)
	r.stream.writeString(archiveFileName)
	r.stream.flush()
}

func (r *remoteAPI) Close() {
	r.stream.writeByte(133)
	r.stream.flush()
}

func (r *remoteAPI) SaveState(stateFileName string) {
	r.stream.writeByte(134)
	r.stream.writeString(stateFileName)
	r.stream.flush()
}

func (r *remoteAPI) LoadState(stateFileName string) {
	r.stream.writeByte(135)
	r.stream.writeString(stateFileName)
	r.stream.flush()
}

func (r *remoteAPI) QuickSaveState(slot int) {
	r.stream.writeByte(136)
	r.stream.writeInt(slot)
	r.stream.flush()
}

func (r *remoteAPI) QuickLoadState(slot int) {
	r.stream.writeByte(137)
	r.stream.writeInt(slot)
	r.stream.flush()
}

func (r *remoteAPI) SetTVSystem(tvSystem string) {
	r.stream.writeByte(138)
	r.stream.writeString(tvSystem)
	r.stream.flush()
}

func (r *remoteAPI) GetTVSystem() string {
	r.stream.writeByte(139)
	r.stream.flush()
	v, _ := r.stream.readString()
	return v
}

func (r *remoteAPI) GetDiskSides() int {
	r.stream.writeByte(140)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) InsertDisk(disk, side int) {
	r.stream.writeByte(141)
	r.stream.writeInt(disk)
	r.stream.writeInt(side)
	r.stream.flush()
}

func (r *remoteAPI) FlipDiskSide() {
	r.stream.writeByte(142)
	r.stream.flush()
}

func (r *remoteAPI) EjectDisk() {
	r.stream.writeByte(143)
	r.stream.flush()
}

func (r *remoteAPI) InsertCoin() {
	r.stream.writeByte(144)
	r.stream.flush()
}

func (r *remoteAPI) PressServiceButton() {
	r.stream.writeByte(145)
	r.stream.flush()
}

func (r *remoteAPI) ScreamIntoMicrophone() {
	r.stream.writeByte(146)
	r.stream.flush()
}

func (r *remoteAPI) Glitch() {
	r.stream.writeByte(147)
	r.stream.flush()
}

func (r *remoteAPI) GetFileInfo() string {
	r.stream.writeByte(148)
	r.stream.flush()
	v, _ := r.stream.readString()
	return v
}

func (r *remoteAPI) SetFullscreenMode(fullscreenMode bool) {
	r.stream.writeByte(149)
	r.stream.writeBoolean(fullscreenMode)
	r.stream.flush()
}

func (r *remoteAPI) SaveScreenshot() {
	r.stream.writeByte(150)
	r.stream.flush()
}

func (r *remoteAPI) AddCheat(address, value, compare int, description string, enabled bool) {
	r.stream.writeByte(151)
	r.stream.writeInt(address)
	r.stream.writeInt(value)
	r.stream.writeInt(compare)
	r.stream.writeString(description)
	r.stream.writeBoolean(enabled)
	r.stream.flush()
}

func (r *remoteAPI) RemoveCheat(address, value, compare int) {
	r.stream.writeByte(152)
	r.stream.writeInt(address)
	r.stream.writeInt(value)
	r.stream.writeInt(compare)
	r.stream.flush()
}

func (r *remoteAPI) AddGameGenie(gameGenieCode, description string, enabled bool) {
	r.stream.writeByte(153)
	r.stream.writeString(gameGenieCode)
	r.stream.writeString(description)
	r.stream.writeBoolean(enabled)
	r.stream.flush()
}

func (r *remoteAPI) RemoveGameGenie(gameGenieCode string) {
	r.stream.writeByte(154)
	r.stream.writeString(gameGenieCode)
	r.stream.flush()
}

func (r *remoteAPI) AddProActionRocky(proActionRockyCode, description string, enabled bool) {
	r.stream.writeByte(155)
	r.stream.writeString(proActionRockyCode)
	r.stream.writeString(description)
	r.stream.writeBoolean(enabled)
	r.stream.flush()
}

func (r *remoteAPI) RemoveProActionRocky(proActionRockyCode string) {
	r.stream.writeByte(156)
	r.stream.writeString(proActionRockyCode)
	r.stream.flush()
}

func (r *remoteAPI) GetPrgRomSize() int {
	r.stream.writeByte(157)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) ReadPrgRom(index int) int {
	r.stream.writeByte(158)
	r.stream.writeInt(index)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) WritePrgRom(index, value int) {
	r.stream.writeByte(159)
	r.stream.writeInt(index)
	r.stream.writeInt(value)
	r.stream.flush()
}

func (r *remoteAPI) GetChrRomSize() int {
	r.stream.writeByte(160)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) ReadChrRom(index int) int {
	r.stream.writeByte(161)
	r.stream.writeInt(index)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) WriteChrRom(index, value int) {
	r.stream.writeByte(162)
	r.stream.writeInt(index)
	r.stream.writeInt(value)
	r.stream.flush()
}

func (r *remoteAPI) GetStringWidth(str string, monospaced bool) int {
	r.stream.writeByte(163)
	r.stream.writeString(str)
	r.stream.writeBoolean(monospaced)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}

func (r *remoteAPI) GetCharsWidth(chars []rune, monospaced bool) int {
	r.stream.writeByte(164)
	r.stream.writeCharArray(chars)
	r.stream.writeBoolean(monospaced)
	r.stream.flush()
	v, _ := r.stream.readInt()
	return v
}
